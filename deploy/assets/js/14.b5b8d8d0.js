(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{410:function(a,s,t){"use strict";t.r(s);var e=t(31),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"promise基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise基础"}},[a._v("#")]),a._v(" Promise基础")]),a._v(" "),t("h2",{attrs:{id:"promise定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise定义"}},[a._v("#")]),a._v(" Promise定义")]),a._v(" "),t("p",[a._v("一个对象，用于传递异步操作的消息。通过new关键字创建实例。")]),a._v(" "),t("h2",{attrs:{id:"promise特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise特点"}},[a._v("#")]),a._v(" Promise特点")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("状态封闭性。状态不受外界改变，只有异步操作结果可以决定当前的状态。共3种状态，分别是Pending、Resolved和Rejected。 只有两种状态改变，即从Pending变为Resolved以及从Pending变为Rejected。")])]),a._v(" "),t("li",[t("p",[a._v("状态不变性。一旦状态改变就不会再变，一直保持这个结果。比如一个Promise对象的状态已经为Resolved，根据状态不变性，再在主线程中抛错是无效的。")])]),a._v(" "),t("li",[t("p",[a._v("状态连锁性。如果一个Promise实例传递了另一个Promise实例，那么该实例会随着要传递的Promise实例的状态变化而变化。\n")])])]),a._v(" "),t("h2",{attrs:{id:"创建promise实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建promise实例"}},[a._v("#")]),a._v(" 创建Promise实例")]),a._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" promise "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Promise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" image "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("src "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://www.baidu.com/img/bd_logo1.png"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addEventListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"load"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addEventListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"error"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"wrong..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("说明：创建Promise实例时需要传入一个函数，传入的函数带有resolve函数参数和reject函数参数，这两个参数由JS引擎提供。resolve函数会将Promise对象从Pending状态转为Resolved状态，并在操作成功时将异步操作结果作为参数传递出去；而reject函数会将Promise对象从Pending状态转为Rejected状态，并在操作失败时将错误对象传递出去。")]),a._v(" "),t("h2",{attrs:{id:"promise-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise-api"}},[a._v("#")]),a._v(" Promise API")]),a._v(" "),t("h3",{attrs:{id:"_1-then-successcallback-errorcallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-then-successcallback-errorcallback"}},[a._v("#")]),a._v(" 1.  then(successCallback[,errorCallback])")]),a._v(" "),t("ul",[t("li",[a._v("作用：当状态改变时进行回调处理")]),a._v(" "),t("li",[a._v("参数：successCallback表示当异步操作成功时被调用的回调，errorCallback表示当异步操作失败时被调用的回调。两个回调函数都将接收Promise对象传出的值作为函数参数")]),a._v(" "),t("li",[a._v("返回值：新的Promise实例，可通过链式调用需顺序执行的操作")])]),a._v(" "),t("h3",{attrs:{id:"_2-catch-callback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-catch-callback"}},[a._v("#")]),a._v(" 2. catch(callback)")]),a._v(" "),t("ul",[t("li",[a._v("作用：相当于then(null,callback)，当异步操作失败时进行的回调处理")]),a._v(" "),t("li",[a._v("参数：callback表示异步操作失败时被调用的回调")]),a._v(" "),t("li",[a._v("返回值：新的Promise实例 ，不管有无被捕获都会继续执行接下来的方法")])]),a._v(" "),t("h3",{attrs:{id:"_3-all-iterator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-all-iterator"}},[a._v("#")]),a._v(" 3. all(iterator)")]),a._v(" "),t("ul",[t("li",[a._v("作用：将多个Promise实例包装成一个新的Promise实例")]),a._v(" "),t("li",[a._v("参数：迭代器对象，每个成员都是Promise对象")]),a._v(" "),t("li",[a._v("返回值：新的Promise实例。当迭代器对象每个成员状态均为resolved时，状态为resolved，传递一个由各成员的返回值组成的数组，否则状态为rejected，传递第一个被rejected的成员的返回值")])]),a._v(" "),t("h3",{attrs:{id:"_4-race-iterator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-race-iterator"}},[a._v("#")]),a._v(" 4.race(iterator)")]),a._v(" "),t("p",[a._v("基本同all方法，不同之处在于迭代器中任一成员的状态发生变化，新实例的状态也会随之变化")]),a._v(" "),t("h3",{attrs:{id:"_5-resolve-obj"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-resolve-obj"}},[a._v("#")]),a._v(" 5.resolve([obj])")]),a._v(" "),t("ul",[t("li",[a._v("作用：转化为Promise对象，且状态为resolved")]),a._v(" "),t("li",[a._v("参数：任意对象。不传递参数时直接创建Promise对象")]),a._v(" "),t("li",[a._v("返回值：新的Promise对象，并传递obj参数给回调函数")])]),a._v(" "),t("h3",{attrs:{id:"_6-reject-reason"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-reject-reason"}},[a._v("#")]),a._v(" 6.reject(reason)")]),a._v(" "),t("p",[a._v("基本同resolve方法，不同之处在于返回的新的Promise对象的状态为rejected")]),a._v(" "),t("h3",{attrs:{id:"_7-done-successcallback-errorcallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-done-successcallback-errorcallback"}},[a._v("#")]),a._v(" 7.done([successCallback][,errorCallback])")]),a._v(" "),t("ul",[t("li",[a._v("作用：保证抛出任何可能出现的错误")]),a._v(" "),t("li",[a._v("参数：同then方法参数")]),a._v(" "),t("li",[a._v("返回值：新的Promise对象")])]),a._v(" "),t("h3",{attrs:{id:"_8-finally-callback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-finally-callback"}},[a._v("#")]),a._v(" 8.finally(callback)")]),a._v(" "),t("ul",[t("li",[a._v("作用：不管Promise对象最后状态如何都会执行的动作")]),a._v(" "),t("li",[a._v("参数：必须执行的回调函数")]),a._v(" "),t("li",[a._v("返回值：新的Promise对象")])]),a._v(" "),t("h2",{attrs:{id:"promise-缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise-缺点"}},[a._v("#")]),a._v(" Promise 缺点")]),a._v(" "),t("ul",[t("li",[a._v("一旦创建Promise实例就无法停止异步操作")]),a._v(" "),t("li",[a._v("当处于Pending状态时无法得知进展到哪一阶段(刚刚开始还是即将完成)")])])])}),[],!1,null,null,null);s.default=r.exports}}]);